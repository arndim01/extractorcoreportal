// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebExtractorCorePortal.Context;

namespace WebExtractorCorePortal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181030015943_FullDatabaseSetup2")]
    partial class FullDatabaseSetup2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("CRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("CRoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CUserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("CUserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("CUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("CUserToken");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.Amendment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AmendmentId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("AmendmentType")
                        .IsRequired();

                    b.Property<string>("ContractEff")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ContractExp")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<long?>("ContractRefId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("HashId");

                    b.Property<long>("SourceId");

                    b.Property<string>("WorkflowPath")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ContractRefId");

                    b.HasIndex("SourceId");

                    b.ToTable("TAmendments");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.AmendmentComparePointer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ContractId");

                    b.Property<long?>("CurrentId");

                    b.Property<long?>("ReferenceId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CurrentId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("TAmendmentComparePointers");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("CUser");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CarrierRefId");

                    b.Property<string>("ContractId")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatorRefId")
                        .IsRequired();

                    b.Property<string>("DirectoryName")
                        .HasMaxLength(128);

                    b.Property<string>("WorkflowPath")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("CarrierRefId");

                    b.HasIndex("CreatorRefId");

                    b.ToTable("TContracts");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.LibCity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AmendmentRefId");

                    b.Property<long>("CarrierRefId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatorRefId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Name_hash")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("AmendmentRefId");

                    b.HasIndex("CarrierRefId");

                    b.HasIndex("CreatorRefId");

                    b.ToTable("LibCities");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.LibCityLibDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<long?>("CityDetailRefId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatorRefId")
                        .IsRequired();

                    b.Property<long>("UnlocRefId");

                    b.HasKey("Id");

                    b.HasIndex("CityDetailRefId");

                    b.HasIndex("CreatorRefId");

                    b.HasIndex("UnlocRefId");

                    b.ToTable("LibCityLibDetails");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.LibCommodity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AmendmentRefId");

                    b.Property<bool>("Approved");

                    b.Property<long>("CarrierRefId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatorRefId")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Exclusions");

                    b.Property<string>("Main_hash_value")
                        .IsRequired();

                    b.Property<string>("Main_value")
                        .IsRequired();

                    b.Property<string>("Nac");

                    b.HasKey("Id");

                    b.HasIndex("AmendmentRefId");

                    b.HasIndex("CarrierRefId");

                    b.HasIndex("CreatorRefId");

                    b.ToTable("LibCommodities");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.LibContainer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CarrierRefId");

                    b.Property<string>("ContainerDirectKeyWord")
                        .HasMaxLength(100);

                    b.Property<string>("ContainerKeyword")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("KeyWordMeaning")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CarrierRefId");

                    b.ToTable("LibContainers");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.Rate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AmendmentRefId");

                    b.Property<string>("ArbsConst")
                        .HasMaxLength(5);

                    b.Property<long?>("CommodityRefId");

                    b.Property<long?>("DestinationTradelane");

                    b.Property<string>("EffectiveDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<long?>("OriginTradelane");

                    b.Property<long>("RateNoteRefId");

                    b.Property<long?>("RateTrade");

                    b.Property<string>("TabType")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AmendmentRefId");

                    b.HasIndex("CommodityRefId");

                    b.HasIndex("DestinationTradelane");

                    b.HasIndex("OriginTradelane");

                    b.HasIndex("RateNoteRefId");

                    b.HasIndex("RateTrade");

                    b.ToTable("TRates");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateBR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BRRefId");

                    b.Property<string>("CodeType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("ContainerSize")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("ContainerType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Header")
                        .HasMaxLength(100);

                    b.Property<string>("RateBasis")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("BRRefId");

                    b.ToTable("TRateBRs");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateCity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AmendmentRefId");

                    b.Property<long?>("CityRefId");

                    b.Property<string>("HashName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AmendmentRefId");

                    b.HasIndex("CityRefId");

                    b.ToTable("TRateCities");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateCityDirect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId");

                    b.Property<string>("CityPoint")
                        .IsRequired();

                    b.Property<long?>("CityRefId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CityRefId");

                    b.ToTable("TRateCityDirects");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateCommodity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AmendmentRefId");

                    b.Property<string>("Brief_description");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Exclusion");

                    b.Property<string>("Main_value")
                        .IsRequired();

                    b.Property<string>("Main_value_hash")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Nac");

                    b.HasKey("Id");

                    b.HasIndex("AmendmentRefId");

                    b.ToTable("TRateCommodities");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateExceptionalNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalCommodity");

                    b.Property<string>("ArbsConstruction")
                        .HasMaxLength(5);

                    b.Property<string>("EffectiveDate")
                        .HasMaxLength(10);

                    b.Property<string>("ExpirationDate")
                        .HasMaxLength(10);

                    b.Property<string>("NoteType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Notes");

                    b.Property<string>("Services")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("TExceptionalNotes");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateFreetime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AmendmentRefId");

                    b.Property<long>("CurrencyRefId");

                    b.Property<string>("EffectiveDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("FreeCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("GVersion");

                    b.Property<int>("MaxDay");

                    b.Property<int>("MinDay");

                    b.Property<string>("Notes");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AmendmentRefId");

                    b.HasIndex("CurrencyRefId");

                    b.ToTable("TRateFreetimes");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateFreetimeDirect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FreetimeId");

                    b.Property<long?>("FreetimeRefId");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.HasIndex("FreetimeId");

                    b.HasIndex("FreetimeRefId");

                    b.ToTable("TRateFreetimeDirects");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateGeneralNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Exceptional");

                    b.Property<string>("GeneralNoteType")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("HashValue");

                    b.Property<string>("MainValue");

                    b.Property<long>("RateGeneralNoteRefId");

                    b.HasKey("Id");

                    b.HasIndex("Exceptional");

                    b.HasIndex("RateGeneralNoteRefId");

                    b.ToTable("TRateGeneralNotes");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateHazGen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CurrencyRefId");

                    b.Property<string>("EffectiveDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("HazCode")
                        .HasMaxLength(250);

                    b.Property<string>("HazDescription");

                    b.Property<string>("HazNote")
                        .HasMaxLength(20);

                    b.Property<long?>("HazRef");

                    b.Property<byte>("HazType");

                    b.Property<string>("Header")
                        .IsRequired();

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("RateBasis")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("ShipSize")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("ShipType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("TabType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyRefId");

                    b.HasIndex("HazRef");

                    b.ToTable("TRateHazGens");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateIndexed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AmendmentRefId");

                    b.Property<long>("GroutId");

                    b.Property<long?>("RateRefId");

                    b.Property<long>("TableId");

                    b.HasKey("Id");

                    b.HasIndex("AmendmentRefId");

                    b.HasIndex("RateRefId");

                    b.ToTable("TRateIndexeds");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateLineNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Exceptional");

                    b.Property<string>("HashValue")
                        .HasMaxLength(128);

                    b.Property<string>("MainValue");

                    b.Property<long>("RateLineNoteRefId");

                    b.Property<string>("SpecificValue");

                    b.HasKey("Id");

                    b.HasIndex("Exceptional");

                    b.HasIndex("RateLineNoteRefId");

                    b.ToTable("TRateLineNotes");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnalystNotes");

                    b.Property<string>("ContractNotes");

                    b.Property<string>("DataEntryNotes");

                    b.Property<string>("ExportMode")
                        .HasMaxLength(20);

                    b.Property<string>("ExportService")
                        .HasMaxLength(20);

                    b.Property<string>("ImportMode")
                        .HasMaxLength(20);

                    b.Property<string>("ImportService")
                        .HasMaxLength(20);

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("TabType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("TRateNotes");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateScope", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMarked");

                    b.Property<string>("TradeName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TRateScopes");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateSurcharge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("CodeType")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("ContainerSize")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("ContainerType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<long>("CurrencyRefId");

                    b.Property<string>("EffectiveDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("RateBasis")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<long?>("SurchargeRefId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyRefId");

                    b.HasIndex("SurchargeRefId");

                    b.ToTable("TRateSurcharges");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateValidationLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("RatelineValidationRefId");

                    b.Property<bool>("Resolve");

                    b.Property<string>("ValidationMsg")
                        .IsRequired();

                    b.Property<string>("ValidationType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TRateValidationLogs");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.Source", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatorRefId");

                    b.Property<long>("Size");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("SourcePath")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("SourceType")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CreatorRefId");

                    b.ToTable("TSource");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.StartedWorkflow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activate");

                    b.Property<long>("AmendmendId");

                    b.Property<string>("CreatorRefId");

                    b.Property<DateTime>("Date");

                    b.HasKey("Id");

                    b.HasIndex("AmendmendId");

                    b.HasIndex("CreatorRefId");

                    b.ToTable("TStartedWorkflows");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysCarrier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarrierCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("CarrierDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("CarrierDirPath")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("CarrierName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SysCarriers");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysColorSchemeColored", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("HtmlColor")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("IsKnown");

                    b.Property<bool>("Prio");

                    b.HasKey("Id");

                    b.ToTable("SysColorSchemeColoreds");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysColorSchemeDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataType");

                    b.Property<long>("SysCarrierRefId");

                    b.Property<long>("SysColorRefId");

                    b.HasKey("Id");

                    b.ToTable("SysColorSchemeDetails");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysColorSchemeIndexed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("HtmlColor")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Indexed");

                    b.Property<bool>("Prio");

                    b.HasKey("Id");

                    b.ToTable("SysColorSchemeIndexeds");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysColorSchemeIndexedDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataType");

                    b.Property<long>("SysCarrierRefId");

                    b.Property<long>("SysColorRefId");

                    b.HasKey("Id");

                    b.ToTable("SysColorSchemeIndexedDetails");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apply")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<long?>("ConditionRefId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ConditionRefId");

                    b.ToTable("SysConditions");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysCurrency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SysCurrencies");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysHazTariff", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CarrierRefId");

                    b.Property<long>("CurrencyRefId");

                    b.Property<string>("EffectiveDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("RateBasis")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("ShipSize")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("ShipType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Trade")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CarrierRefId");

                    b.HasIndex("CurrencyRefId");

                    b.ToTable("SysHazTariffs");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysSurchargeGRI", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<long>("CarrierRefId");

                    b.Property<string>("ContainerSize")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("ContainerType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<long>("CurrencyRefId");

                    b.Property<string>("EffectiveDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("RateBasis")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CarrierRefId");

                    b.HasIndex("CurrencyRefId");

                    b.ToTable("SysSurchargeGRIs");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysSurchargeKeyword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SysSurchargeKeywords");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysTradelane", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TradelaneCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("SysTradelanes");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysUnloc", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<string>("Full_code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Iso")
                        .HasMaxLength(10);

                    b.Property<bool>("Port");

                    b.Property<string>("State");

                    b.Property<string>("State_code")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SysUnlocs");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysUnlocTrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Export_code")
                        .HasMaxLength(50);

                    b.Property<string>("Import_code")
                        .HasMaxLength(50);

                    b.Property<long>("UnlocRefId");

                    b.HasKey("Id");

                    b.HasIndex("UnlocRefId");

                    b.ToTable("SysUnlocTrades");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Gender");

                    b.Property<string>("IdentityId");

                    b.Property<string>("Locale");

                    b.Property<string>("Location");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("CUserDetails");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.Workflow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ClaimedDate");

                    b.Property<bool>("Completed");

                    b.Property<DateTime>("CompletedDate");

                    b.Property<long>("SWorkflowRefId");

                    b.Property<string>("UClaimedRefId");

                    b.Property<string>("UCompletedRefId");

                    b.HasKey("Id");

                    b.HasIndex("SWorkflowRefId");

                    b.HasIndex("UClaimedRefId");

                    b.HasIndex("UCompletedRefId");

                    b.ToTable("TWorkflows");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.Amendment", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Contract")
                        .WithMany("Amendments")
                        .HasForeignKey("ContractRefId");

                    b.HasOne("WebExtractorCorePortal.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.AmendmentComparePointer", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("WebExtractorCorePortal.Models.Amendment", "AmendmentCur")
                        .WithMany()
                        .HasForeignKey("CurrentId");

                    b.HasOne("WebExtractorCorePortal.Models.Amendment", "AmendmentRef")
                        .WithMany()
                        .HasForeignKey("ReferenceId");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.Contract", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.SysCarrier", "Carrier")
                        .WithMany()
                        .HasForeignKey("CarrierRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.LibCity", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Amendment", "Amendment")
                        .WithMany()
                        .HasForeignKey("AmendmentRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.SysCarrier", "SysCarrier")
                        .WithMany()
                        .HasForeignKey("CarrierRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.LibCityLibDetail", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.LibCity")
                        .WithMany("Cities")
                        .HasForeignKey("CityDetailRefId");

                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.SysUnloc", "Unloc")
                        .WithMany()
                        .HasForeignKey("UnlocRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.LibCommodity", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Amendment", "Amendment")
                        .WithMany()
                        .HasForeignKey("AmendmentRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.SysCarrier", "SysCarrier")
                        .WithMany()
                        .HasForeignKey("CarrierRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.LibContainer", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.SysCarrier", "SysCarrier")
                        .WithMany()
                        .HasForeignKey("CarrierRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.Rate", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Amendment", "Amendment")
                        .WithMany()
                        .HasForeignKey("AmendmentRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.RateCommodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("CommodityRefId");

                    b.HasOne("WebExtractorCorePortal.Models.SysTradelane", "DestTradelane")
                        .WithMany()
                        .HasForeignKey("DestinationTradelane");

                    b.HasOne("WebExtractorCorePortal.Models.SysTradelane", "OrgTradelane")
                        .WithMany()
                        .HasForeignKey("OriginTradelane");

                    b.HasOne("WebExtractorCorePortal.Models.RateNote", "RateNote")
                        .WithMany()
                        .HasForeignKey("RateNoteRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.RateScope", "RateScope")
                        .WithMany()
                        .HasForeignKey("RateTrade");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateBR", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Rate")
                        .WithMany("BaseRates")
                        .HasForeignKey("BRRefId");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateCity", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Amendment", "Amendment")
                        .WithMany()
                        .HasForeignKey("AmendmentRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.LibCity", "CityLib")
                        .WithMany()
                        .HasForeignKey("CityRefId");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateCityDirect", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Rate")
                        .WithMany("RateCityDirects")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.RateCity", "RateCity")
                        .WithMany()
                        .HasForeignKey("CityRefId");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateCommodity", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Amendment", "Amendment")
                        .WithMany()
                        .HasForeignKey("AmendmentRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateFreetime", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Amendment", "Amendment")
                        .WithMany()
                        .HasForeignKey("AmendmentRefId");

                    b.HasOne("WebExtractorCorePortal.Models.SysCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateFreetimeDirect", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Rate")
                        .WithMany("RateFreetimeDirects")
                        .HasForeignKey("FreetimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.RateFreetime", "RateFreetime")
                        .WithMany()
                        .HasForeignKey("FreetimeRefId");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateGeneralNote", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.RateExceptionalNote", "ExceptionalNote")
                        .WithMany()
                        .HasForeignKey("Exceptional");

                    b.HasOne("WebExtractorCorePortal.Models.Rate")
                        .WithMany("RateGeneralNotes")
                        .HasForeignKey("RateGeneralNoteRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateHazGen", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.SysCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyRefId");

                    b.HasOne("WebExtractorCorePortal.Models.Rate")
                        .WithMany("Hazardous")
                        .HasForeignKey("HazRef");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateIndexed", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Amendment", "Amendment")
                        .WithMany()
                        .HasForeignKey("AmendmentRefId");

                    b.HasOne("WebExtractorCorePortal.Models.Rate", "Rate")
                        .WithMany()
                        .HasForeignKey("RateRefId");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateLineNote", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.RateExceptionalNote", "ExceptionalNote")
                        .WithMany()
                        .HasForeignKey("Exceptional");

                    b.HasOne("WebExtractorCorePortal.Models.Rate")
                        .WithMany("RateLineNotes")
                        .HasForeignKey("RateLineNoteRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.RateSurcharge", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.SysCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.RateExceptionalNote")
                        .WithMany("Surcharges")
                        .HasForeignKey("SurchargeRefId");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.Source", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorRefId");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.StartedWorkflow", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.Amendment", "Amendment")
                        .WithMany()
                        .HasForeignKey("AmendmendId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorRefId");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysCondition", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.RateFreetime")
                        .WithMany("Condition")
                        .HasForeignKey("ConditionRefId");

                    b.HasOne("WebExtractorCorePortal.Models.SysHazTariff")
                        .WithMany("Condition")
                        .HasForeignKey("ConditionRefId");

                    b.HasOne("WebExtractorCorePortal.Models.SysSurchargeGRI")
                        .WithMany("Condition")
                        .HasForeignKey("ConditionRefId");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysHazTariff", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.SysCarrier", "Carrier")
                        .WithMany()
                        .HasForeignKey("CarrierRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.SysCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysSurchargeGRI", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.SysCarrier", "Carrier")
                        .WithMany()
                        .HasForeignKey("CarrierRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.SysCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.SysUnlocTrade", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.SysUnloc", "Unloc")
                        .WithMany()
                        .HasForeignKey("UnlocRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.UserDetails", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");
                });

            modelBuilder.Entity("WebExtractorCorePortal.Models.Workflow", b =>
                {
                    b.HasOne("WebExtractorCorePortal.Models.StartedWorkflow", "SWorkflow")
                        .WithMany()
                        .HasForeignKey("SWorkflowRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser", "Claimed")
                        .WithMany()
                        .HasForeignKey("UClaimedRefId");

                    b.HasOne("WebExtractorCorePortal.Models.ApplicationUser", "Released")
                        .WithMany()
                        .HasForeignKey("UCompletedRefId");
                });
#pragma warning restore 612, 618
        }
    }
}
